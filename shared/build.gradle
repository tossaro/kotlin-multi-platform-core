plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "org.jetbrains.kotlin.native.cocoapods"
    id "com.android.library"
    id 'org.jetbrains.dokka' version "1.7.10"
    id 'kotlin-parcelize'
    id "kotlin-kapt"
    id "kotlinx-serialization"
    id "maven-publish"
}

apply from: '../properties.gradle'

group = "${setup.appId}"
version = "${buildVersionName()}"

android {
    namespace = "${setup.appId}.shared"
    compileSdk = setup.compileSdkVersion
    defaultConfig {
        minSdk = setup.minSdkVersion
        targetSdk = setup.targetSdkVersion
        versionCode buildVersionCode()
        versionName buildVersionName()

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        dataBinding = true
    }
    packagingOptions {
        exclude "META-INF/INDEX.LIST"
    }
    task installLocalGitHook(type: Copy) {
        from new File(rootProject.rootDir, 'scripts/pre-commit')
        into { new File(rootProject.rootDir, '.git/hooks') }
        fileMode 0775
    }
    build.dependsOn installLocalGitHook
}

dokkaGfm {
    suppressInheritedMembers.set(true)
    outputDirectory.set(file("${rootProject.rootDir}/docs/${project.name}"))
}

kotlin {
    android {
        publishAllLibraryVariants()
        publishLibraryVariantsGroupedByFlavor = true
    }

//    iosX64()
//    iosArm64()
//    iosSimulatorArm64()

    cocoapods {
        summary = "Some description for the Shared Module"
        homepage = "Link to the Shared Module homepage"
        version = "1.0"
        ios.deploymentTarget = "14.1"
        podfile = project.file("../iosApp/Podfile")
//        framework {
//            baseName = "shared"
//        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "com.russhwolf:multiplatform-settings:1.0.0-RC"
                implementation "io.insert-koin:koin-core:3.2.0"
                implementation "io.insert-koin:koin-test:3.2.0"
                implementation "io.ktor:ktor-client-core:2.1.2"
                implementation "io.ktor:ktor-client-content-negotiation:2.1.2"
                implementation "io.ktor:ktor-client-logging:2.1.2"
                implementation "io.ktor:ktor-serialization-kotlinx-json:2.1.2"
                implementation "org.slf4j:slf4j-simple:1.7.26"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
            }
        }
//        commonTest {
//            dependencies {
//                implementation(kotlin("test"))
//            }
//        }
        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "io.ktor:ktor-client-okhttp:2.1.2"
            }
        }
//        androidTest
//        iosX64Main
//        iosArm64Main
//        iosSimulatorArm64Main
        iosMain {
            dependsOn(commonMain)
//            iosX64Main.dependsOn(it)
//            iosArm64Main.dependsOn(it)
//            iosSimulatorArm64Main.dependsOn(it)
            dependencies {
                implementation "io.ktor:ktor-client-darwin:2.1.2"
            }
        }
//        iosX64Test
//        iosArm64Test
//        iosSimulatorArm64Test
//        iosTest {
//            dependsOn(commonTest)
//            iosX64Test.dependsOn(it)
//            iosArm64Test.dependsOn(it)
//            iosSimulatorArm64Test.dependsOn(it)
//        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    dep.each {
        if (it.configuration == "platform") {
            add("implementation", platform(it.dependency))
        } else {
            add(it.configuration, it.dependency, it.options)
        }
    }
}

publishing {
    repositories {
        maven {
            name = "Core"
            url = uri("https://gitlab.com/api/v4/projects/38836420/packages/maven")
            credentials(HttpHeaderCredentials) {
                name = 'Private-Token'
                value = gitlab.publishToken
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}